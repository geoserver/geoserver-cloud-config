spring.config.import:
 - optional:geoserver_logging.yml

# Defines the root base path at which the gateway exposes all geoserver request paths
# We're not setting the spring.webflux.base-path because spring-cloud Gateway doesn't
# work properly with it. See https://github.com/spring-cloud/spring-cloud-gateway/issues/1759
# For example, if geoserver.base-path=/geoserver-cloud, then geoserver requests will be served
# under that path prefix (e.g. http://localhost:9090/geoserver-cloud/web, http://localhost:9090/geoserver-cloud/wfs, etc)
# Examples:
#geoserver.base-path:
#geoserver.base-path: /geoserver
#geoserver.base-path: /geoserver-cloud
#geoserver.base-path: /geoserver/cloud
# Leave it empty for no additional path, setting it to / won't work currently
geoserver:
  base-path: ${geoserver_base_path:}
  security:
    gateway-shared-auth:
       # enable sharing the webui authentication through the gateway with the other microservices
       # make sure the same config is applied in geoserver.yml
       enabled: ${gateway.shared-auth:true}

basepath: ${geoserver.base-path}
# by default, assumes a discovery-client is in use, and perform client-side load balancing on
# the advertised instances. See the 'standalone' profile notes for a static config 
targets:
  acl: http://acl:8080
  wfs: lb://wfs-service
  wms: lb://wms-service
  wcs: lb://wcs-service
  wps: lb://wps-service
  rest: lb://restconfig-v1
  gwc: lb://gwc-service
  webui: lb://web-ui
  webui-demo: lb://web-ui

# Configure routes to services. See https://cloud.spring.io/spring-cloud-gateway/single/spring-cloud-gateway.html
server:
  port: 8080
  # Let spring-boot's ForwardedHeaderFilter take care of reflecting the client-originated protocol and address in the HttpServletRequest  
  forward-headers-strategy: framework
  compression:
    enabled: true

spring:
  cloud:
    gateway:
      enabled: true
      # Disable the Forwarded header, rely on X-Forwarded-*. Forwarded is built wrong.
      # e.g.:      proto=https;host=\"gateway:8080\";for=\"172.20.0.1:51084\
      # instead of proto=https;host=\"original-host:443\";for=\"172.20.0.1:51084\
      forwarded.enabled: false
      x-forwarded:
        for-enabled: true
        host-enabled: true
        port-enabled: true
        proto-enabled: true
        prefix-enabled: true
      metrics.enabled: true
      default-filters:
        # see https://docs.spring.io/spring-cloud-gateway/reference/spring-cloud-gateway/gatewayfilter-factories/deduperesponseheader-factory.html
        - DedupeResponseHeader=Access-Control-Allow-Origin Access-Control-Allow-Credentials, RETAIN_UNIQUE
        #remove the base path on downstream requests
        - StripBasePath=${basepath}
      global-filter:
        websocket-routing:
          enabled: true
      filter:
        secure-headers:
          enabled: true
          disable:
          - content-security-policy
          frame-options: SAMEORIGIN
          xss-protection-header: 0
          referrer-policy: no-referrer
      globalcors:
        #add-to-simple-url-handler-mapping: true
        cors-configurations:
          "[/**]":
            allowedOrigins: "*"
            allowedHeaders: "*"
            allowedMethods: GET, PUT, POST, DELETE, OPTIONS, HEAD
      actuator:
        verbose:
          enabled: true
      routes:
        - id: root-redirect-to-webui
          uri: no://op
          predicates:
          - Path=/,${basepath}
          filters:
          - RedirectTo=302, ${basepath}/web/
        - id: acl-root-redirect-to-swagger
          # redirect /acl and /acl/ to swagger, otherwise /acl/ works but /acl doesn't
          uri: no://op
          predicates:
          - Path=${basepath}/acl
          filters:
          - RedirectTo=302, ${basepath}/acl/openapi/swagger-ui/index.html
        - id: acl
          uri: ${targets.acl}
          predicates:
          - Path=${basepath}/acl/**
          filters:
          - RewritePath=/acl,/acl/
        # WFS routes
        - id: wfs # proxies requests to gateway-service:/wfs to wfs-service:/wfs
          uri: ${targets.wfs}
          predicates:
            - Path=${basepath}/wfs,${basepath}/{workspace}/wfs,${basepath}/{workspace}/{layer}/wfs,${basepath}/schemas/wfs/**,${basepath}/webresources/wfs/**
        # proxy [/{workspace}]/ows?SERVICE=wfs to wfs-service:[/{workspace}]/ows?SERVICE=wfs. Param value is case insensitive, name is not.
        - id: wfs_ows
          uri: ${targets.wfs}
          predicates:
            - Path=${basepath}/ows,${basepath}/{workspace}/ows,${basepath}/{workspace}/{layer}/ows
            - RegExpQuery=(?i:service),(?i:wfs) # match service=wfs case insensitively
        # WMS routes
        - id: wms # proxies requests to gateway-service:/wms to wms-service:/wms
          uri: ${targets.wms}
          predicates:
            - Path=${basepath}/wms,${basepath}/{workspace}/wms,${basepath}/{workspace}/{layer}/wms,${basepath}/schemas/wms/**,${basepath}/openlayers/**,${basepath}/openlayers3/**,${basepath}/webresources/wms/**,${basepath}/options.png
        - id: wms_ows # proxy [/{workspace}]/ows?SERVICE=wms to wms-service:[/{workspace}]/ows?SERVICE=wms. Param value is case insensitive, name is not.
          uri: ${targets.wms}
          predicates:
            - Path=${basepath}/ows,${basepath}/{workspace}/ows,${basepath}/{workspace}/{layer}/ows
            - RegExpQuery=(?i:service),(?i:wms) # match service=wms case insensitively
        - id: kml # proxies requests to kml endpoints to the wms service
          uri: ${targets.wms}
          predicates:
            - Path=${basepath}/wms/kml,${basepath}/{workspace}/wms/kml,${basepath}/kml/icon/**
        # WCS routes
        - id: wcs # proxies requests to gateway-service:/wcs to wcs-service:/wcs
          uri: ${targets.wcs}
          predicates:
            - Path=${basepath}/wcs,${basepath}/{workspace}/wcs,${basepath}/{workspace}/{layer}/wcs,${basepath}/schemas/wcs/**
        - id: wcs_ows # proxy [/{workspace}]/ows?SERVICE=wcs to wcs-service:[/{workspace}]/ows?SERVICE=wcs. Param value is case insensitive, name is not.
          uri: ${targets.wcs}
          predicates:
            - Path=${basepath}/ows,${basepath}/{workspace}/ows,${basepath}/{workspace}/{layer}/ows
            - RegExpQuery=(?i:service),(?i:wcs) # match service=wcs case insensitively
        # WPS routes
        - id: wps # proxies requests to gateway-service:/wps to wfs-service:/wps
          uri: ${targets.wps}
          predicates:
            - Path=${basepath}/wps,${basepath}/{segment}/wps,${basepath}/schemas/wps/**
        - id: wps_ows # proxy [/{workspace}]/ows?SERVICE=wps to wps-service:[/{workspace}]/ows?SERVICE=wps. Param value is case insensitive, name is not.
          uri: ${targets.wps}
          predicates:
            - Path=${basepath}/ows,${basepath}/{segment}/ows
            - RegExpQuery=(?i:service),(?i:wps) # match service=wps case insensitively
        # REST configuration routes
        - id: restconfig
          uri: ${targets.rest}
          predicates:
            - Path=${basepath}/rest/**
        # GeoWebcache configuration routes
        - id: gwc
          uri: ${targets.gwc}
          predicates:
            - Path=${basepath}/gwc/**,${basepath}/{workspace}/gwc/**,${basepath}/{workspace}/{layer}/gwc/**
        # Web UI configuration routes
        - id: webui
          uri: ${targets.webui}
          predicates:
            - Path=${basepath}/**
          #- Path=${basepath},${basepath}/,${basepath}/index.html,${basepath}/web,${basepath}/web/**,${basepath}/j_spring_security_check,${basepath}/j_spring_security_logout
management:
  endpoints:
    enabled-by-default: true
    web.exposure.include: "*"
  endpoint:
    info.enabled: true
    metrics.enabled: true
    shutdown.enabled: true
    health:
      enabled: true
      show-details: always
  metrics:
    binders:
      processor.enabled: true
      uptime.enabled: true
      jvm.enabled: true
    enable.all: true
    enable.jvm: true
    export:
      atlas.enabled: false
---
# this profile is automatically included if any of the embedded
# config_first or discovery_first profile groups are active
spring.config.activate.on-profile: discovery_eureka
# Should only be set in application.yml. Setting the value in bootstrap.yml will cause undesirable side effects like registering in eureka with an UNKNOWN status.
# See https://cloud.spring.io/spring-cloud-netflix/2.0.x/multi/multi__service_discovery_eureka_clients.html#_eureka_s_health_checks
eureka.client.healthcheck.enabled: true
eureka.server.url: http://discovery:8761/eureka
---
spring.config.activate.on-profile: standalone
# Define static targets using known host names.
# Host names can be docker-compose assigned service names, or k8s service names as appropriate
targets:
  acl: http://acl:8080
  wfs: http://wfs:8080
  wms: http://wms:8080
  wcs: http://wcs:8080
  wps: http://wps:8080
  rest: http://rest:8080
  gwc: http://gwc:8080
  webui: http://webui:8080
---
spring.config.activate.on-profile: debug

logging:
   level:
      root: debug
---
spring.config.activate.on-profile: logging_debug_security
logging:
  level:
    org.geoserver.cloud.security.gateway.sharedauth.pre: debug
    org.geoserver.cloud.security.gateway.sharedauth.post: debug
---
spring.config.activate.on-profile: local
server.port: 9090
management.server.port: 9090
targets:
  acl: http://localhost:9000
  wfs: http://localhost:9101
  wms: http://localhost:9102
  wcs: http://localhost:9103
  wps: http://localhost:9104
  rest: http://localhost:9105
  webui: http://localhost:9106
  gwc: http://localhost:9107
